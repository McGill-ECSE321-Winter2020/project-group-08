package ca.mcgill.ecse321.petshelter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import ca.mcgill.ecse321.petshelter.dao.*;
import ca.mcgill.ecse321.petshelter.model.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
public class PetShelterPersistenceTests {

	@Autowired
	AdoptRequestRepository adoptRequestRepository;
	
	@Autowired
	AppAdminRepository appAdminRepository;
	
	@Autowired
	AppUserRepository appUserRepository;
	
	@Autowired
	DonationRepository donationRepository;
	
	@Autowired
	PersonRepository personRepository;
	
	@Autowired
	PetPostRepository petPostRepository;
	
	@Autowired
	QuestionRepository questionRepository;
	
	@Autowired
	UserProfileRepository userProfileRepository;
	
	
	
	
	
	@AfterEach
	public void clearDatabase() {
		adoptRequestRepository.deleteAll();
		appAdminRepository.deleteAll();
		appUserRepository.deleteAll();
		donationRepository.deleteAll();
		personRepository.deleteAll();
		petPostRepository.deleteAll();
		questionRepository.deleteAll();
		userProfileRepository.deleteAll();
	}
	
	
	
	

	//AdoptRequest test

	@Test
	public void PersistAndLoadAdoptRequest() {
		Status status = Status.PENDING;
		AdoptRequest adoptRequest = new AdoptRequest();
		adoptRequest.setStatus(status);
		
		
		
		Person person = new Person();
		person.setUsername("hello");
		person.setPassword("world");
		personRepository.save(person);
		adoptRequest.setRequestedBy(person);
		
		
		Person person_dos = new Person();
		person_dos.setUsername("Juan");
		person_dos.setPassword("Pablo");
		personRepository.save(person_dos);
		
		PetPost petPost = new PetPost();
		petPost.setAvailability(true);
		petPost.setDescription("wololo");
		petPost.setName("boohoo");
		petPost.setOwnedBy(person_dos);
		petPost.setTypeOfPet("cat");
		petPostRepository.save(petPost);
		
		adoptRequest.setRequesting(petPost);
		
		
		adoptRequestRepository.save(adoptRequest);
		//id autogenerated on save
		int id = adoptRequest.getAdoptRequestId();
		
		adoptRequest = null;
		
		adoptRequest = adoptRequestRepository.findByAdoptRequestId(id);
		assertNotNull(adoptRequest);
		assertEquals(status, adoptRequest.getStatus());

		
		
	}
	
	
	//AppAdmin test
	@Test
	public void PersistAndLoadAppAdmin() {
		String username = "Michael";
		String password = "Admin";
		AppAdmin appAdmin = new AppAdmin();
		appAdmin.setPassword(password);
		appAdmin.setUsername(username);
		
		appAdminRepository.save(appAdmin);
		
		appAdmin = null;
		appAdmin = appAdminRepository.findByUsername(username);
		assertNotNull(appAdmin);
		assertEquals(username, appAdmin.getUsername());
		assertEquals(password, appAdmin.getPassword());
	}
	
	
	//AppUser test
	@Test
	public void PersistAndLoadAppUser() {
		String username = "JWS";
		String password = "3GPA";
		PersonRole personRole = PersonRole.ADOPTER;
		
		AppUser appUser = new AppUser();
		appUser.setPassword(password);
		appUser.setUsername(username);
		appUser.setAppUserRole(personRole);
		appUserRepository.save(appUser);
		
		appUser = null;
		
		appUser = appUserRepository.findByUsername(username);
		assertNotNull(appUser);
		assertEquals(username, appUser.getUsername());
		assertEquals(password, appUser.getPassword());
		assertEquals(personRole, appUser.getAppUserRole());
		
	
	}
	
	
	//Donation test
	
	@Test
	public void testPersistAndLoadDonation() {
		double amount = 100.25;
		String comment = "very nice!";
		boolean setNameAnonymous = true;
		Donation donation = new Donation();
		donation.setAmount(amount);
		donation.setComment(comment);
		donation.setSetNameAnonymous(setNameAnonymous);
		donationRepository.save(donation);
		int id = donation.getDonationId();
		
		donation = null;
		
		donation = donationRepository.findByDonationId(id);
		assertNotNull(donation);
		assertEquals(amount, donation.getAmount(), 0.01);
		assertEquals(comment, donation.getComment());
	}
	
	
	//person test
	
	@Test
	public void testPersistAndLoadPerson() {
		String name = "TestPerson";
		String password = "Password";
		Person person = new Person();

		person.setUsername(name);
		person.setPassword(password);
		personRepository.save(person);
		person = null;
		person = personRepository.findByUsername(name);
		assertNotNull(person);
		assertEquals(name, person.getUsername());
		assertEquals(password, person.getPassword());
	}
	
	
	//petpost test
	@Test
	public void PersistAndLoadPetPost() {
		
		String username = "TestPerson";
		String password = "Password";
		Person person = new Person();
		person.setUsername(username);
		person.setPassword(password);
		personRepository.save(person);
		
		
		
		PetPost petPost = new PetPost();
		
		
		petPost.setAvailability(true);
		String name = "bob";
		petPost.setName(name);
		String typePet = "cat";
		petPost.setTypeOfPet(typePet);
		String description = "bob is fat";
		petPost.setDescription(description);
		petPost.setOwnedBy(person);
		petPostRepository.save(petPost);
		//post id is autogenerated after save
		int id = petPost.getPetPostId();
		
		petPost = null;
		
		petPost = petPostRepository.findByPetPostId(id);
		assertNotNull(petPost);
		assertEquals(name, petPost.getName());
		assertEquals(typePet, petPost.getTypeOfPet());
		assertEquals(description, petPost.getDescription());
		
		
	}
	
	//question test
	@Test
	public void PersistAndLoadQuestion() {
		String askQuestion = "I have a question";
		String answer = "";
		Question question = new Question();
		question.setQuestion(askQuestion);
		question.setAnswer(answer);
		questionRepository.save(question);
		int id = question.getQuestionId();
		
		question = null;

		question = questionRepository.findByQuestionId(id);
		assertNotNull(question);
		assertEquals(askQuestion, question.getQuestion());
		assertEquals(answer, question.getAnswer());
	}
	
	//userprofile test
	@Test
	public void PersistAndLoadUserProfile() {
		Person person = new Person();
		String username = "hello";
		person.setUsername(username);
		person.setPassword("world");
		personRepository.save(person);
		
		String address = "123 rue Mcgill";
		boolean hasExperienceWithPets = true;
		Integer numberOfPetsCurrentlyOwned = 1;
		String typeOfLivingAccomodation = "house";
		
		
		UserProfile userProfile = new UserProfile();
		
		userProfile.setAddress(address);
		userProfile.setHasExperienceWithPets(hasExperienceWithPets);
		userProfile.setNumberOfPetsCurrentlyOwned(numberOfPetsCurrentlyOwned);
		userProfile.setTypeOfLivingAccomodation(typeOfLivingAccomodation);
		userProfile.setPerson(person);
		userProfileRepository.save(userProfile);
		int id = userProfile.getUserProfileId();
		
		userProfile = null;
		
		userProfile = userProfileRepository.findByUserProfileId(id);
		assertNotNull(userProfile);
		assertEquals(address, userProfile.getAddress());
		assertEquals(hasExperienceWithPets, userProfile.getHasExperienceWithPets());
		assertEquals(numberOfPetsCurrentlyOwned, userProfile.getNumberOfPetsCurrentlyOwned());
		assertEquals(typeOfLivingAccomodation, userProfile.getTypeOfLivingAccomodation());
	}
}
